mainmodule leanmd {

  readonly CProxy_Main mainProxy;       //central controller
  readonly CProxy_Cell cellArray;     //array that houses atoms
  readonly CProxy_Compute computeArray; //computational kernels
  readonly CkGroupID mCastGrpID;      //multicast group handle

  readonly int cellArrayDimX;		// X dimension of the Cell array
  readonly int cellArrayDimY;		// Y dimension of the Cell array
  readonly int cellArrayDimZ;		// Y dimension of the Cell array
  readonly int finalStepCount;		// number of steps in the simulaion
  readonly int firstLdbStep;		// begin load balancing after this many steps
  readonly int ldbPeriod;		// load balancing period
  readonly int checkptFreq;     // do FT every period

  //central controller chare
  mainchare [migratable] Main {
    entry Main(CkArgMsg* msg);
    entry [reductiontarget] void computesCreated(); //called when computes have been created
    entry [reductiontarget] void energySumP(double iP, double fP);  //reduction of potential energy
    entry [reductiontarget] void energySumK(double iK, double fK);  //reduction of kinetic energy

    //this get called after the main constructor has called cell array constructor
    entry void run() {
      //compute array created, call for section creation
      when computesCreated() atomic {
        computeArray.doneInserting();
        CkPrintf("Computes: %d .... created\n", (NUM_NEIGHBORS/2+1)*cellArrayDimX*cellArrayDimY*cellArrayDimZ);
        CkPrintf("Starting simulation .... \n\n");
        cellArray.run();
        computeArray.run();
      }
      //receive intial and final energies and compare
      when energySumP(double fP, double iP), energySumK(double fK, double iK) atomic {
        if(abs(fP + fK - iP - iK)>ENERGY_VAR) {
          CkPrintf("Energy value has varied significantly from %E to %E\n",iP+iK,fP+fK);
          CkPrintf("\nEnergy conservation test failed for maximum allowed variation of %E units.\nSIMULATION UNSUCCESSFULL\n",ENERGY_VAR);  
        } else {
          CkPrintf("\nEnergy conservation test passed for maximum allowed variation of %E units.\nSIMULATION SUCCESSFULL \n",ENERGY_VAR);
        }
        CkExit();
      }
    };
  };

  //message used to convey particle to computes
  message ParticleDataMsg{
    vec3 part[];
  };

  //chares to house atoms
  array [3D] Cell {
    entry Cell();  
    entry void createComputes();    //call to insert computes that I need  
    entry void receiveParticles(CkVec<Particle> updates);   //receive atoms that have migrated to neighboring cells to me
    entry void ResumeFromSync();    //resume from here after load balancing
    entry void startCheckpoint(int ncells);
    entry void recvCheckPointDone();
    entry [reductiontarget] void reduceForces(vec3 forces[n], int n);   //receives forces from my computes on my atoms

    //function to perform iterations for Cells
    entry void run() {
      if(thisIndex.x==0 && thisIndex.y==0 && thisIndex.z==0) atomic {
          stepTime = CkWallTimer(); }

      atomic { createSection(); }

      for(stepCount = 1; stepCount <= finalStepCount; stepCount++) {
        //send current atom positions to my computes 
        atomic { sendPositions(); } 

        //update properties of atoms using new force values 
        when reduceForces(vec3 forces[n], int n) atomic { updateProperties(forces, n); }

        if ((stepCount %  MIGRATE_STEPCOUNT) == 0) {
          //send atoms that have moved beyond my cell to neighbors
          atomic { migrateParticles(); } 
    
          //receive particles from my neighbors
          for(updateCount = 0; updateCount < inbrs; updateCount++) {
            when receiveParticles(CkVec<Particle> &updates) atomic {
              for(int i=0; i < updates.length(); i++) {
                particles.push_back(updates[i]);    //add particles that have moved from neighboring cells to my cell
              }
            }
          }
        }
		if (stepCount % checkptFreq == 0) {
          atomic {
            if (thisIndex.x==0 && thisIndex.y==0 && thisIndex.z==0) {
              CmiPrintf("[%d] CHECKPOINT at step %d\n", CkMyPe(), stepCount);
            }
            thisProxy[CkArrayIndex3D(0,0,0)].startCheckpoint(0);
          }
          when recvCheckPointDone() {}
        }
        if (thisIndex.x==0 && thisIndex.y==0 && thisIndex.z==0 && 
          stepCount%20==0) atomic {
          CkPrintf("Step %d Benchmark Time %lf ms/step\n", 
          stepCount, ((CkWallTimer() - stepTime)/20)*1000);
          stepTime = CkWallTimer();
        }
        //periodically call load balancer
        if (stepCount >= firstLdbStep && (stepCount - firstLdbStep) % ldbPeriod == 0) {
          atomic { AtSync(); }
          when ResumeFromSync() atomic { 
            stepTime = CkWallTimer();
          }
        }
        if (stepCount == 60 && thisIndex.x == 1 && thisIndex.y == 1 && thisIndex.z == 0) {
          atomic {
            if (CkHasCheckpoints()){   
			CkPrintf("CkDieNow step 35\n");
			CkDieNow();
		}
          }
        }
      }
      //everything done, reduction on kinetic energy
      atomic { contribute(2*sizeof(double),energy,CkReduction::sum_double,CkCallback(CkReductionTarget(Main,energySumK),mainProxy)); }
    };
  };

  //chares that do force computations for pair of cells
  array [6D] Compute {
    entry Compute();
    entry void ResumeFromSync();
    entry void calculateForces(ParticleDataMsg *msg);

    entry void run() {
      for(stepCount = 1; stepCount <= finalStepCount; stepCount++) {
        //self interaction check
        if(thisIndex.x1==thisIndex.x2 && thisIndex.y1==thisIndex.y2 && thisIndex.z1==thisIndex.z2) {
          when calculateForces(ParticleDataMsg *msg) atomic { selfInteract(msg); }
        } else {
          //receive positions from two cells - buffer the first one
          when calculateForces(ParticleDataMsg *msg) atomic { bufferedMsg = msg; }
          when calculateForces(ParticleDataMsg *msg) atomic { interact(msg); }
        }
        //periodically call load balancer
        if (stepCount >= firstLdbStep && (stepCount - firstLdbStep) % ldbPeriod== 0) {
          atomic { AtSync(); }
          when ResumeFromSync() atomic { }
        }
      }
      //everything done, reduction on potential energy
      atomic { contribute(2*sizeof(double),energy,CkReduction::sum_double,CkCallback(CkReductionTarget(Main,energySumP),mainProxy)); }
    };
  };
};
